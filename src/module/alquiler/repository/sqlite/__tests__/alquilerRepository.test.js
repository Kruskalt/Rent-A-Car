const { Sequelize } = require("sequelize");
const fs = require("fs");
const AlquilerRepository = require("../alquilerRepository.js");
const Alquiler = require("../../../entity/alquiler.js");
const AlquilerNotFoundError = require("../../error/alquilerNotFoundError.js");
const AlquilerIdNotDefinedError = require("../../error/alquilerIdNotDefinedError.js");
const AlquilerModel = require("../../../model/alquilerModel.js");
const AutoModel = require("../../../../auto/model/autoModel.js");
const ClienteModel = require("../../../../clientes/model/clienteModel.js");
const Cliente = require("../../../../clientes/entity/cliente.js");
const Auto = require("../../../../auto/entity/auto.js");
const sequelizeInstance = new Sequelize('sqlite::memory');

/**
 * @type AlquilerRepository
 */
let repository;

const sampleAlquiler = new Alquiler({
  auto: new Auto({
    id: undefined,
    marca: undefined,
    modelo: undefined,
    año: undefined,
    kms: undefined,
    color: undefined,
    aire: undefined,
    pasajeros: undefined,
    automatico: undefined,
    manual: undefined,
    precio:undefined,
  }),
  cliente: new Cliente({
    id:undefined,
    nombre: undefined,
    apellido: undefined,
    tipoDni: undefined,
    nroDni: undefined,
    direccion: undefined,
    telefono: undefined,
    email: undefined,
    nacimiento: undefined,
  }),
  
  precioUnitario: 555,
  desde: "2-3-3333",
  hasta: "2-3-3333",
  created_at: undefined,
  medioDePago: "d",
  pagado: false,
  precioTotal: 50000,
  updated_at: undefined,
});

beforeAll(() => {
  const Alquiler = AlquilerModel.setup(sequelizeInstance);
  const Auto = AutoModel.setup(sequelizeInstance);
  const Cliente = ClienteModel.setup(sequelizeInstance)
  Alquiler.belongsTo(Auto);
  Alquiler.belongsTo(Cliente);

  repository = new AlquilerRepository(Alquiler, Auto, Cliente);
});

beforeEach(async (done) => {
  await sequelizeInstance.sync({ force: true });
  done();
});

test('Crea un alquiler cuando la entidad no tiene id', async () => {
  const NEW_AUTOGENERATED_ID = 1;
  const newAlquiler = await repository.save(sampleAlquiler);
  expect(newAlquiler.id).toEqual(NEW_AUTOGENERATED_ID);
});

test('Actualiza un alquiler cuando la entidad tiene un id', async () => {
  const NEW_AUTOGENERATED_ID = 1;
  const newAlquiler = await repository.save(sampleAlquiler);
  expect(newAlquiler.id).toEqual(NEW_AUTOGENERATED_ID);

  newAlquiler.precioUnitario = 777;
  console.log(newAlquiler);
  const modifiedAlquiler = await repository.save(newAlquiler);
  expect(modifiedAlquiler.id).toEqual(NEW_AUTOGENERATED_ID);
  expect(modifiedAlquiler.precioUnitario).toEqual(777);
});

test('Borrar un alquiler existente devuelve true', async () => {
  const NEW_AUTOGENERATED_ID = 1;
  const newAlquiler = await repository.save(sampleAlquiler);
  expect(newAlquiler.id).toEqual(NEW_AUTOGENERATED_ID);
  await expect(repository.delete(newAlquiler)).resolves.toEqual(true);
  await expect(repository.getById(NEW_AUTOGENERATED_ID)).rejects.toThrow(AlquilerNotFoundError);
});

test('Borrar un alquiler sin parámetros da error', async () => {
  await expect(repository.delete()).rejects.toThrow(AlquilerIdNotDefinedError);
});

test('Borrar un alquiler sin id da error', async () => {
  await expect(repository.delete({})).rejects.toThrow(AlquilerIdNotDefinedError);
});

test('Borrar un alquiler con id inexistente devuelve false', async () => {
  await expect(repository.delete({ id: 1 })).resolves.toEqual(false);
});
