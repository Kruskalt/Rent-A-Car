const { Sequelize } = require("sequelize");

const ClienteRepository = require("../clienteRepository.js");
const ClienteEntity = require("../../../entity/cliente.js");
const ClienteNotFoundError = require("../../error/clienteNotFoundError.js");
const ClienteIdNotDefinedError = require("../../error/clienteIdNotDefinedError.js");
const ClienteModel = require("../../../model/clienteModel.js");

const sequelizeInstance = new Sequelize("sqlite::memory");

/**
 * @type ClienteRepository
 */
let repository;
const sampleCliente = new ClienteEntity({
  id: undefined,
  nombre: undefined,
  apellido: undefined,
  tipoDni: undefined,
  nroDni: undefined,
  direccion: undefined,
  telefono: undefined,
  email: undefined,
  nacimiento: undefined,
});
beforeAll(() => {
  const Cliente = ClienteModel.setup(sequelizeInstance);
  repository = new ClienteRepository(Cliente);
});
beforeEach(async (done) => {
  await sequelizeInstance.sync({ force: true });
  done();
});

test("Guardar un cliente nuevo genera un id", async () => {
  const NEW_AUTOGENERATED_ID = 1;
  const newCliente = await repository.save(sampleCliente);
  expect(newCliente.id).toEqual(NEW_AUTOGENERATED_ID);
});

test("Guardar un cliente existente actualiza los valores", async () => {
  const NEW_AUTOGENERATED_ID = 1;
  const newCliente = await repository.save(sampleCliente);
  expect(newCliente.id).toEqual(NEW_AUTOGENERATED_ID);

  newCliente.apellido = "perez";
  console.log(newCliente);
  const modifiedCliente = await repository.save(newCliente);
  expect(modifiedCliente.id).toEqual(NEW_AUTOGENERATED_ID);
  expect(modifiedCliente.apellido).toEqual("perez");
});

test("Eliminar cliente elimina un cliente existente", async () => {
  const NEW_AUTOGENERATED_ID = 1;
  const newCliente = await repository.save(sampleCliente);
  expect(newCliente.id).toEqual(NEW_AUTOGENERATED_ID);
  await expect(repository.delete(newCliente)).resolves.toEqual(true);
  await expect(repository.getById(NEW_AUTOGENERATED_ID)).rejects.toThrow(
    ClienteNotFoundError
  );
});

test("Otener todos los clientes devuelve un array de entidad cliente", async () => {
  const nuevoCliente = await repository.save(
    new ClienteEntity({
      id: undefined,
      nombre: "ramon",
      apellido: "castillo",
      tipoDni: "dni",
      nroDni: 41460800,
      direccion: "siempreviva 333",
      telefono: "111",
      email: "@example.com",
      nacimiento: "2003-10-3",
    })
  );
  const nuevoCliente2 = await repository.save(
    new ClienteEntity({
      id: undefined,
      nombre: "ramon",
      apellido: "castillo",
      tipoDni: "dni",
      nroDni: 41460800,
      direccion: "siempreviva 333",
      telefono: "111",
      email: "@example.com",
      nacimiento: "2003-10-3",
    })
  );
  const clientes = await repository.getAll();
  console.log(clientes);
  expect(clientes[0]).toMatchObject(nuevoCliente);
  expect(clientes[1]).toMatchObject(nuevoCliente2);
});
